// Mocks generated by Mockito 5.4.1 from annotations
// in tiktok_clone/test/screens/tiktok_screen/tiktok_screen_test.dart.
// Do not manually edit this file.

// @dart=2.19

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:bloc/bloc.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;
import 'package:tiktok_clone/models/following_section_model.dart' as _i4;
import 'package:tiktok_clone/models/for_you_section_model.dart' as _i3;
import 'package:tiktok_clone/screens/tiktok_screen/bloc/tik_tok_bloc_bloc.dart'
    as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeTikTokBlocState_0 extends _i1.SmartFake
    implements _i2.TikTokBlocState {
  _FakeTikTokBlocState_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeForYouSectionModel_1 extends _i1.SmartFake
    implements _i3.ForYouSectionModel {
  _FakeForYouSectionModel_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFollowingSectionModel_2 extends _i1.SmartFake
    implements _i4.FollowingSectionModel {
  _FakeFollowingSectionModel_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [TikTokBlocBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockTikTokBlocBloc extends _i1.Mock implements _i2.TikTokBlocBloc {
  MockTikTokBlocBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.TikTokBlocState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeTikTokBlocState_0(
          this,
          Invocation.getter(#state),
        ),
      ) as _i2.TikTokBlocState);
  @override
  _i5.Stream<_i2.TikTokBlocState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i5.Stream<_i2.TikTokBlocState>.empty(),
      ) as _i5.Stream<_i2.TikTokBlocState>);
  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);
  @override
  void add(_i2.TikTokBlocEvent? event) => super.noSuchMethod(
        Invocation.method(
          #add,
          [event],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onEvent(_i2.TikTokBlocEvent? event) => super.noSuchMethod(
        Invocation.method(
          #onEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void emit(_i2.TikTokBlocState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void on<E extends _i2.TikTokBlocEvent>(
    _i6.EventHandler<E, _i2.TikTokBlocState>? handler, {
    _i6.EventTransformer<E>? transformer,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #on,
          [handler],
          {#transformer: transformer},
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onTransition(
          _i6.Transition<_i2.TikTokBlocEvent, _i2.TikTokBlocState>?
              transition) =>
      super.noSuchMethod(
        Invocation.method(
          #onTransition,
          [transition],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i5.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
  @override
  void onChange(_i6.Change<_i2.TikTokBlocState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [TikTokBlocInitial].
///
/// See the documentation for Mockito's code generation for more information.
class MockTikTokBlocInitial extends _i1.Mock implements _i2.TikTokBlocInitial {
  MockTikTokBlocInitial() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<Object?> get props => (super.noSuchMethod(
        Invocation.getter(#props),
        returnValue: <Object?>[],
      ) as List<Object?>);
}

/// A class which mocks [LoadingState].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoadingState extends _i1.Mock implements _i2.LoadingState {
  MockLoadingState() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<Object?> get props => (super.noSuchMethod(
        Invocation.getter(#props),
        returnValue: <Object?>[],
      ) as List<Object?>);
}

/// A class which mocks [ForYouSectionSuccessState].
///
/// See the documentation for Mockito's code generation for more information.
class MockForYouSectionSuccessState extends _i1.Mock
    implements _i2.ForYouSectionSuccessState {
  MockForYouSectionSuccessState() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.ForYouSectionModel get forYouSectionModel => (super.noSuchMethod(
        Invocation.getter(#forYouSectionModel),
        returnValue: _FakeForYouSectionModel_1(
          this,
          Invocation.getter(#forYouSectionModel),
        ),
      ) as _i3.ForYouSectionModel);
  @override
  List<Object?> get props => (super.noSuchMethod(
        Invocation.getter(#props),
        returnValue: <Object?>[],
      ) as List<Object?>);
}

/// A class which mocks [FollowingSectionSuccessState].
///
/// See the documentation for Mockito's code generation for more information.
class MockFollowingSectionSuccessState extends _i1.Mock
    implements _i2.FollowingSectionSuccessState {
  MockFollowingSectionSuccessState() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.FollowingSectionModel get followingSectionModel => (super.noSuchMethod(
        Invocation.getter(#followingSectionModel),
        returnValue: _FakeFollowingSectionModel_2(
          this,
          Invocation.getter(#followingSectionModel),
        ),
      ) as _i4.FollowingSectionModel);
  @override
  List<Object?> get props => (super.noSuchMethod(
        Invocation.getter(#props),
        returnValue: <Object?>[],
      ) as List<Object?>);
}

/// A class which mocks [ErrorState].
///
/// See the documentation for Mockito's code generation for more information.
class MockErrorState extends _i1.Mock implements _i2.ErrorState {
  MockErrorState() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<Object?> get props => (super.noSuchMethod(
        Invocation.getter(#props),
        returnValue: <Object?>[],
      ) as List<Object?>);
}
